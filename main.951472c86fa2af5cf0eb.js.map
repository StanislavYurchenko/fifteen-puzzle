{"version":3,"sources":["webpack:///./index.js","webpack:///./js/FifteenPuzzle.js"],"names":["reference","this","_puzzleRef","document","querySelector","_victory","_gameState","_indexZero","_indexToMove","_directionOfMove","_numberRequestToMove","_mixedArray","addEventListener","_puzzleHolder","bind","_init","isWin","flat","some","item","i","_markup","list","createElement","classList","add","forEach","row","indexRow","square","indexColumn","squareItem","setAttribute","textContent","appendChild","winBanner","innerHTML","_arrangeGameState","Array","from","querySelectorAll","find","el","dataset","number","style","transform","_findIndexElement","numberToMove","reduce","acc","rowIndex","indexOf","colIndex","_findDirectionOfMove","_changePosition","_showWinnerBanner","display","event","target","currentTarget","_mixArray","arr","j","temp","length","Math","floor","random","_isArraySolvable","_newGameState","index","array","map","sum"],"mappings":"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","file":"main.951472c86fa2af5cf0eb.js","sourcesContent":["import './styles/styles.scss';\nimport FifteenPuzzle from './js/FifteenPuzzle.js';\n\nconst fifteenPuzzle = new FifteenPuzzle('.puzzle');\n","export default class FifteenPuzzle {\r\n  constructor(reference) {\r\n    this._puzzleRef = document.querySelector(`${reference}`);\r\n    this._victory = false;\r\n    this._gameState = [\r\n      [1, 2, 3, 4],\r\n      [5, 6, 7, 8],\r\n      [9, 10, 11, 12],\r\n      [13, 14, 15, 0],\r\n    ];\r\n    this._indexZero;\r\n    this._indexToMove;\r\n    this._directionOfMove;\r\n    this._numberRequestToMove;\r\n    this._mixedArray;\r\n    this._puzzleRef.addEventListener('click', this._puzzleHolder.bind(this));\r\n    this._init();\r\n  }\r\n\r\n  isWin() {\r\n    return !this._gameState\r\n      .flat()\r\n      .some((item, i) => item > 0 && item - 1 !== i);\r\n  }\r\n\r\n  _markup() {\r\n    const list = document.createElement('ul');\r\n    list.classList.add('square__list');\r\n    this._gameState.forEach((row, indexRow) => {\r\n      row.forEach((square, indexColumn) => {\r\n        const squareItem = document.createElement('li');\r\n        squareItem.classList.add('square__item');\r\n        squareItem.classList.add(`square-${indexRow * 4 + indexColumn}`);\r\n        squareItem.setAttribute('data-number', `${indexRow * 4 + indexColumn}`);\r\n        squareItem.textContent = `${indexRow * 4 + indexColumn}`;\r\n        list.appendChild(squareItem);\r\n      });\r\n    });\r\n    const winBanner = document.createElement('div');\r\n    winBanner.classList.add('win-banner');\r\n    winBanner.innerHTML = `<span>Congratulations!</span><span class=\"br\">You won</span>`;\r\n\r\n    this._puzzleRef.appendChild(list);\r\n    this._puzzleRef.appendChild(winBanner);\r\n  }\r\n  _arrangeGameState() {\r\n    this._gameState.forEach((row, indexRow) => {\r\n      row.forEach((square, indexColumn) => {\r\n        const squareRefs = Array.from(\r\n          this._puzzleRef.querySelectorAll('.square__item'),\r\n        );\r\n        const squareRef = squareRefs.find(\r\n          el =>\r\n            el.dataset.number === `${this._gameState[indexRow][indexColumn]}`,\r\n        );\r\n        squareRef.style.transform = `translate(${indexColumn * 100}%, ${\r\n          indexRow * 100\r\n        }%)`;\r\n      });\r\n    });\r\n  }\r\n  _findIndexElement(numberToMove) {\r\n    return this._gameState.reduce((acc, row, rowIndex) => {\r\n      if (row.indexOf(numberToMove) === -1) return acc;\r\n      return {\r\n        ...acc,\r\n        ...{ rowIndex: rowIndex, colIndex: row.indexOf(numberToMove) },\r\n      };\r\n    }, {});\r\n  }\r\n  _findDirectionOfMove() {\r\n    if (\r\n      this._indexToMove.rowIndex === this._indexZero.rowIndex - 1 &&\r\n      this._indexToMove.colIndex === this._indexZero.colIndex\r\n    )\r\n      return 'toDown';\r\n    if (\r\n      this._indexToMove.rowIndex === this._indexZero.rowIndex + 1 &&\r\n      this._indexToMove.colIndex === this._indexZero.colIndex\r\n    )\r\n      return 'toUp';\r\n    if (\r\n      this._indexToMove.rowIndex === this._indexZero.rowIndex &&\r\n      this._indexToMove.colIndex === this._indexZero.colIndex - 1\r\n    )\r\n      return 'toRight';\r\n    if (\r\n      this._indexToMove.rowIndex === this._indexZero.rowIndex &&\r\n      this._indexToMove.colIndex === this._indexZero.colIndex + 1\r\n    )\r\n      return 'toLeft';\r\n    return 'impossible';\r\n  }\r\n  _changePosition() {\r\n    if (\r\n      this._directionOfMove === 'toDown' ||\r\n      this._directionOfMove === 'toUp'\r\n    ) {\r\n      this._gameState[this._indexZero.rowIndex][\r\n        this._indexZero.colIndex\r\n      ] = this._gameState[this._indexToMove.rowIndex][\r\n        this._indexToMove.colIndex\r\n      ];\r\n      this._gameState[this._indexToMove.rowIndex][\r\n        this._indexToMove.colIndex\r\n      ] = 0;\r\n    }\r\n    if (\r\n      this._directionOfMove === 'toRight' ||\r\n      this._directionOfMove === 'toLeft'\r\n    ) {\r\n      this._gameState[this._indexZero.rowIndex][\r\n        this._indexZero.colIndex\r\n      ] = this._gameState[this._indexToMove.rowIndex][\r\n        this._indexToMove.colIndex\r\n      ];\r\n      this._gameState[this._indexToMove.rowIndex][\r\n        this._indexToMove.colIndex\r\n      ] = 0;\r\n    }\r\n  }\r\n  _showWinnerBanner() {\r\n    if (this._victory) {\r\n      this._puzzleRef.querySelector('.win-banner').style.display = 'block';\r\n    }\r\n  }\r\n  _puzzleHolder(event) {\r\n    if (this._victory) return;\r\n    const { target, currentTarget } = event;\r\n    if (currentTarget === target || target.dataset.number === '0') return;\r\n    this._numberRequestToMove = +target.dataset.number;\r\n    this._indexToMove = this._findIndexElement(this._numberRequestToMove);\r\n    this._indexZero = this._findIndexElement(0);\r\n    this._directionOfMove = this._findDirectionOfMove();\r\n\r\n    this._changePosition();\r\n    this._arrangeGameState();\r\n    this._victory = this.isWin();\r\n    this._showWinnerBanner();\r\n  }\r\n  _mixArray(arr) {\r\n    let j, temp;\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n      j = Math.floor(Math.random() * (i + 1));\r\n      temp = arr[j];\r\n      arr[j] = arr[i];\r\n      arr[i] = temp;\r\n    }\r\n    if (!this._isArraySolvable(arr)) {\r\n      this._mixArray(arr);\r\n    }\r\n    return arr;\r\n  }\r\n  _newGameState() {\r\n    let index = 1;\r\n    const array = Array.from({ length: 15 }, () => index++);\r\n    this._mixedArray = this._mixArray(array);\r\n    return this._gameState.map((row, indexRow) => {\r\n      return [\r\n        ...row.map((el, indexColumn) => {\r\n          if (indexRow === 3 && indexColumn === 3) return 0;\r\n          return this._mixedArray[indexRow * 4 + indexColumn];\r\n        }),\r\n      ];\r\n    });\r\n  }\r\n  _isArraySolvable(arr) {\r\n    let sum = 0;\r\n    for (let i = 1; i < arr.length - 1; i++)\r\n      for (let j = i - 1; j >= 0; j--) if (arr[j] > arr[i]) sum++;\r\n    return !(sum % 2);\r\n  }\r\n  _init() {\r\n    this._gameState = this._newGameState();\r\n    this._markup();\r\n    this._arrangeGameState();\r\n  }\r\n}\r\n"],"sourceRoot":""}